@page "/about"
@inject AppState appState
@inject IDialogService dialogService
@inject IJSRuntime jsRuntime
@inject ILocalStorageService localStorage
@inject INavigationService navigationService

@using System.Text.RegularExpressions

<div class="h20"></div>
<div class="full-height">
	<div class="row">
		<p class="fw-bolder">
			Developer Contact
		</p>
		@foreach (var link in externalLinks)
		{
			<p class="link" @onclick="() => navigationService.GoToAsync(Paths.Web, ParameterNames.WebLink, link.Url)">@link.Description</p>
		}

		<p class="fw-bolder">
			Acknowledgements
		</p>
		<p>
			To the entire Xamarin and .NET MAUI community for publishing a variety of articles ranging from getting started to detailed insights.
		</p>
		<p>
			And to Kym Phillpotts and team, for their tireless efforts in collating the latest and greatest week after week to keep the community stay up-to-date.
		</p>
	</div>
	@*<div class="row">
		<input type="text" @bind="key" @onkeydown="OnKeyDown" @bind:event="oninput" />
	</div>
	<div class="row mt15i">
		<input type="button" value="Remove" @onclick="OnRemove" />
	</div>*@
</div>

@code {
	private List<ExternalLinks> externalLinks = new();

	private string key;

	protected override void OnInitialized()
	{
		base.OnInitialized();
		appState.SetBackButtonState(false);
		appState.SetPageTitle(Paths.About);

		externalLinks.Add(new("https://egvijayanand.in/", "Vijay Anand E G"));
		externalLinks.Add(new("https://github.com/egvijayanand/WeeklyXamarinBlazor", "GitHub Repository"));
	}

	private async void OnKeyDown(KeyboardEventArgs e)
	{
		if (e.Code == Constants.Keys.Enter || e.Key == Constants.Keys.Enter)
		{
			if (await localStorage.ContainKeyAsync(key)
				&& await jsRuntime.InvokeAsync<bool>("confirm", "Are you sure?"))
			{
				await localStorage.RemoveItemAsync(key);
				await jsRuntime.InvokeVoidAsync("alert", $"Item with key '{key}' has been removed.");
				key = string.Empty;
			}
		}
	}

	private async void OnRemove()
	{
		//var key = await jsRuntime.InvokeAsync<string>("prompt", "Enter the item key to remove.");
		var key = await dialogService.DisplayPromptAsync(Constants.AppTitle, "Enter the item key to remove.");

		if (key != null)
		{
			if (Regex.IsMatch(key, "[a-zA-Z0-9_-]+"))
			{
				if (await localStorage.ContainKeyAsync(key)
				/*&& await jsRuntime.InvokeAsync<bool>("confirm", "Are you sure?")*/)
				{
					if (await dialogService.DisplayAlert(Constants.AppTitle, "Are you sure?", "Yes", "No"))
					{
						await localStorage.RemoveItemAsync(key);
						//await jsRuntime.InvokeVoidAsync("alert", $"Item with key '{key}' has been removed.");
						await dialogService.DisplayAlert(Constants.AppTitle, $"Item with key '{key}' has been removed.", "OK");
					}
				}
				else
				{
					await dialogService.DisplayAlert(Constants.AppTitle, "Entered item key not found.", "OK");
				}
			}
			else
			{
				await dialogService.DisplayAlert(Constants.AppTitle, "Entered item key is invalid.", "OK");
			}
		}
	}
}
